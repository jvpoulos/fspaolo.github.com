%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[11pt]{article}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%packages
\usepackage{amsmath,amssymb,graphicx,amsfonts,psfrag,layout,subfigure,array,longtable,lscape,booktabs,dcolumn,hyperref}
\usepackage{natbib}
\usepackage[page]{appendix}
\usepackage{multicol}  
\usepackage{setspace}
\usepackage{hyperref, url}
\usepackage[margin=1in]{geometry} %1 inch margins
\usepackage{Sweave}

%macros
\newcommand{\Adv}{{\mathbf{Adv}}}       
\newcommand{\prp}{{\mathrm{prp}}}                  
\newcommand{\calK}{{\cal K}}
\newcommand{\outputs}{{\Rightarrow}}                
\newcommand{\getsr}{{\:\stackrel{{\scriptscriptstyle\hspace{0.2em}\$}}{\leftarrow}\:}}
\newcommand{\andthen}{{\::\;\;}}    %  \: \; for thinspace, medspace, thickspace
\newcommand{\Rand}[1]{{\mathrm{Rand}[{#1}]}}       % A command with one argument
\newcommand{\Perm}[1]{{\mathrm{Perm}[{#1}]}}       
\newcommand{\Randd}[2]{{\mathrm{Rand}[{#1},{#2}]}} % and with two arguments
\newcommand{\E}{\mathrm{E}}
\newcommand{\Var}{\mathrm{Var}}
\newcommand{\Cov}{\mathrm{Cov}}
\DeclareMathOperator*{\plim}{plim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
\title{Replication code for ``Wealth, Officeholding, and Elite Demand for Slavery in Antebellum Georgia''}
\date{\today}
\author{Jason Poulos \\\
\url{poulos@berkeley.edu}}
\maketitle
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Load required packages. Install replication tools package \texttt{repmis} to import data from Dropbox.
<<preliminaries-R,echo=FALSE,results='hide'>>=
library(knitr) 
library(plyr)
library(ggplot2)
library(gdata)
library(grid)
library(AER)
library(memisc)
library(reporttools)
devtools::install_github('christophergandrud/repmis')
library(repmis)
@

<<echo=FALSE, engine='bash'>>=
opts_chunk$set(comment=NA,tidy=TRUE)
@

This file replicates the results for the analyses of the treatment effects on officeholding and support for slavery (i.e., observed test statistics, $p$ values, and confidence intervals). First, import the data from the internet:
<<echo=FALSE>>=
lottery <- source_DropboxData(file = "lottery.csv", 
  key = "tdi7rb4fzbpr5l2", stringsAsFactors=FALSE)
assembly <- source_DropboxData(file = "assembly.csv", 
  key = "w9ozk3499dtrzla", stringsAsFactors=FALSE)
@

\section{Treatment effect on officeholding}

Count the number of prizes in the lottery. Create a vector representing a box of tickets equal to the number of draws. On Each ticket is a participant ID. 
<<>>=
#count # of prizes
prizes <- 2*length(lottery$draw[lottery$draw=="PP"])+length(lottery$draw[lottery$draw=="P"])+length(lottery$draw[lottery$draw=="BP"])+length(lottery$draw[lottery$draw=="PB"])
#create a box vector
box <- c(lottery$row.no,lottery$row.no[nchar(lottery$draw)==2])
@

Create a new data frame that excludes widows, orphans, and prior officeholders. Have a column for participant ID number, binary treatment indicator, draw result, and outcome. 
<<>>=
#subset data 
outcome <- subset(lottery,lottery$orphan!=1 & lottery$widow!=1 & lottery$prior.office!=1,select=c("row.no","treat","draw","office.holder"))
@

Define a function that takes arguments for the outcome variable, treatment, draws, box, and number of prizes, to calculate average treatment effect using difference--in--means (weighted by inverse propensity score).
<<>>=
#define treatment effect function
est.ate <- function(y,treat,draw,box,prizes){
  #calculate prob(Z=1) 
  prob.treat <- ifelse(nchar(draw)==2,2*(prizes/length(box)),prizes/length(box))
  #create vector of weights 
  weight <- treat/prob.treat + (1-treat)/(1-prob.treat) 
  #return ATE 
  return(weighted.mean(y[treat==1],weight[treat==1]) - weighted.mean(y[treat==0],weight[treat==0]))  
}
@

Define the permutation test. Note that permutation treatment and control group sizes will vary depending on how many participants registered for two draws win two prizes. 
<<>>=
  Permutation.Test<-function(box,outcome,y,prizes,L=10000,two.sided=FALSE){
    #specify outcome
    outcome$y <- y
    #create vector to store permutation t-stats
    new.t.stats<-rep(0,L)
    #iterate permutation test L times
    for(i in 1:L){
      #create permutation assignment vector 
      Z <-sample(c(rep(1,prizes), rep(0,length(box) - prizes)), replace=FALSE)
      #permutation assignment IDs (remove second entry)
      new.t <- sort(unique(box[Z==1]))
      new.c <- sort(unique(box [! box %in% new.t]))
      perm.treat <- rbind(cbind(new.t,1),cbind(new.c,0))
      colnames(perm.treat) <- c("row.no","perm.treat")
      #link to observed outcomes
      perm.outcome <- merge(outcome,perm.treat,by= "row.no")
      #calculate permutation test statistic
      new.t.stats[i]<-est.ate(perm.outcome$y,perm.outcome$perm.treat,perm.outcome$draw,box,prizes)
    }
    #calculate p value
    if (two.sided){
    pvalue<-sum(abs(new.t.stats) >= abs(est.ate(outcome$y,outcome$treat,outcome$draw,box,prizes)))/L 
    }
    else {
    pvalue<-sum(new.t.stats >= est.ate(outcome$y,outcome$treat,outcome$draw,box,prizes))/L
    }
    #return p-value and permutation vectors
    return(list("p" = pvalue, "perm.t.stats" = new.t.stats))
  }
@

Call \texttt{Permutation.Test}.
<<>>=
#call function
results <- Permutation.Test(box,outcome,y=outcome$office.holder,prizes)
@

Report observed t--stat, the p--value, and create histogram of test statistics from the permutation distribution.
<<>>=
#what is observed t-stat?
observed.t.stat <- est.ate(outcome$office.holder,outcome$treat,outcome$draw,box,prizes)
observed.t.stat
#report p-value
options(scipen=9999)
results$p
#create histogram of permutation distribution
hist.plot <- qplot(results$perm.t.stats, geom="histogram",xlab=expression(delta), ylab="Count",binwidth=0.0001) + labs(title="Treatment effect on officeholding") + geom_vline(aes(xintercept=round(observed.t.stat,3)), colour="red", linetype = "longdash") + scale_x_continuous(breaks=c(-0.01,0,round(observed.t.stat,3)),labels=c("-0.01","0",round(observed.t.stat,3)))
@

Estimate randomization confidence intervals. Assume a constant treatment effect. 
<<>>=
#define function
perm.CI <- function(alpha=0.05,box,outcome,y,prizes,l=1000,L=100) {
#define treatment and control
treat <- outcome$treat
#create vector to store CIs
CI<-rep(0,l)
for(i in 1:l){
#choose constant treatment effect
delta.c <- sample(seq(-1,1,by=0.0000001),1,replace=FALSE)
#subtract from all of treated outcomes
y.delta<- ifelse(treat==1,y-delta.c,y)
#run permuation test
results <- Permutation.Test(box,outcome,y=y.delta,prizes,L,two.sided=TRUE)
#if result not significant, delta.c is in confidence interval
CI[i] <- ifelse(results$p>alpha,delta.c,NA)
}
return(range(CI,na.rm=TRUE))
}
#report(100-alpha)% CI 
perm.CI(alpha=0.05,box,outcome,y=outcome$office.holder,prizes)
@

Create table showing officeholder totals by treatment group.
<<results='tex'>>=
tableNominal(vars = outcome[c("office.holder")], group = outcome$treat, prec = 3,cumsum=FALSE,cap = "Distribution of the outcome variable, by treatment assignment, for sample excluding widows, orphans, and pretreatment officeholders. `Officeholder' indicates whether participant held office between 1806 and 1846, inclusive.  $p$ value is calculated using a randomization test for weighted difference of means between treatment and control groups.", lab = "outcomes")
@

\section{Sensitivity analysis: above cutoff}

<<>>=
#Restrict participants to median (and above) surname length
outcome2 <- subset(lottery,orphan!=1 & widow!=1 & prior.office!=1 & surname.length>=6,select=c("row.no","treat","draw","office.holder"))
#call perm test
results2 <- Permutation.Test(box,outcome2,y=outcome2$office.holder,prizes)
results2$p
#what is observed t-stat?
observed.t.stat2 <- est.ate(outcome2$office.holder,outcome2$treat,outcome2$draw,box,prizes)
observed.t.stat2
#create histogram of permutation distribution
hist.plot2 <- qplot(results2$perm.t.stats, geom="histogram",xlab=expression(delta), ylab="Count",binwidth=0.0001) + labs(title="Treatment effect on officeholding: Above property threshold") + geom_vline(aes(xintercept=round(observed.t.stat2,3)), colour="red", linetype = "longdash") + scale_x_continuous(breaks=c(-0.01,0,round(observed.t.stat2,3)),labels=c("-0.01","0",round(observed.t.stat2,3)))
#report(100-alpha)% 
perm.CI(alpha=0.05,box,outcome2,y=outcome2$office.holder,prizes)
@

Create table showing officeholder totals by treatment group.
<<results='tex'>>=
tableNominal(vars = outcome2[c("office.holder")], group = outcome2$treat, prec = 3,cumsum=FALSE,cap = "Distribution of the outcome variable, by treatment assignment, for sample of participants having a surname length of 6 characters or greater. See notes for Table \ref{outcomes}.", lab = "outcomes-subset-surname")
@

\section{Sensitivity analysis: treatment--on--the--treated (TOT)}

<<>>=
#subset data
outcome3 <- subset(lottery,lottery$orphan!=1 & lottery$widow!=1 & lottery$prior.office!=1,select=c("row.no","treat","draw","office.holder","RGB","county","prize","prize2"))
#create dummy for treatment received 
outcome3$tot <- outcome3$treat
outcome3$tot[outcome3$RGB==1] <- 0
#create dummy for 2 draws
outcome3$twodraw <- ifelse(nchar(outcome3$draw)==2,1,0)
#call IV
results3 <- ivreg(office.holder ~ tot | treat, data=outcome3)
results3.2 <- ivreg(office.holder ~ twodraw + tot | twodraw + treat, data=outcome3)
results3.3 <- ivreg(office.holder ~ twodraw + county + tot | twodraw +county + treat, data=outcome3)
#get confidence interval
confint(results3.3,"tot",level =0.95)
#report treatment effect
results3.3$coefficients["tot"]
@

Create table showing officeholder totals by treatment group and compliance status.
<<results='tex'>>=
#partition groups for table (0 = control; 1 = complier; 2= noncomplier)
outcome3$partition <- outcome3$treat 
outcome3$partition[outcome3$RGB==1] <- 2 
#create table
tableNominal(vars = outcome3[c("office.holder")], group = c(outcome3$partition), prec = 3,cumsum=FALSE,cap = "Distribution of the outcome variable, by treatment assignment and compliance status, for analysis of treatment--on--the--treated (TOT). See notes for Table.", lab = "outcomes-subset-compliance")
@

\section{Sensitivity analysis: three treatments}

Create dummies for actually receiving Ba, Wa, and Wi land. 
<<>>=
#use same lottery as noncomplier analysis
outcome4 <- outcome3
#create treatment dummies 
outcome4$Ba <- ifelse(substr(outcome4$prize,1,2)=="Ba" | substr(outcome4$prize2,1,2)=="Ba",1,0)
outcome4$Ba[is.na(outcome4$Ba)] <- 0
outcome4$Wa <- ifelse(substr(outcome4$prize,1,2)=="Wa" | substr(outcome4$prize2,1,2)=="Wa",1,0)
outcome4$Wa[is.na(outcome4$Wa)] <- 0
outcome4$Wi <- ifelse(substr(outcome4$prize,1,2)=="Wi" | substr(outcome4$prize2,1,2)=="Wi" | substr(outcome4$prize,1,2)=="W",1,0)
outcome4$Wi[is.na(outcome4$Wi)] <- 0
#create TOT dummies
outcome4$Ba.tot <- outcome4$Ba
outcome4$Ba.tot[outcome4$RGB==1] <- 0
outcome4$Wa.tot <- outcome4$Wa
outcome4$Wa.tot[outcome4$RGB==1] <- 0
outcome4$Wi.tot <- outcome4$Wi
outcome4$Wi.tot[outcome4$RGB==1] <- 0
@ 

Repeat IV analysis using the full specification.
<<>>=
#call IV
results4.Ba.3 <- ivreg(office.holder ~ twodraw + county + Ba.tot | twodraw +county + Ba, data=outcome4)
results4.Wa.3 <- ivreg(office.holder ~ twodraw + county + Wa.tot | twodraw +county + Wa, data=outcome4)
results4.Wi.3 <- ivreg(office.holder ~ twodraw + county + Wi.tot | twodraw +county + Wi, data=outcome4)
#get confidence interval
confint(results4.Ba.3,"Ba.tot",level =0.95)
confint(results4.Wa.3,"Wa.tot",level =0.95)
confint(results4.Wi.3,"Wi.tot",level =0.95)
#report treatment effects
results4.Ba.3$coefficients["Ba.tot"]
results4.Wa.3$coefficients["Wa.tot"]
results4.Wi.3$coefficients["Wi.tot"]
@

Create table showing treatment assignment and compliance status.
<<results='tex'>>=
#partition groups for table (0 = control; 1 = complier; 2= noncomplier)
outcome4$partition <- outcome4$treat 
outcome4$partition[outcome4$RGB==1] <- 2 
#create table
tableNominal(vars = outcome4[c("Ba","Wa","Wi")], group = c(outcome4$partition), prec = 3,cumsum=FALSE,cap = "Distribution of treatment assignment, by compliance status.", lab = "three-counties")
@

\section{Estimation of treatment effect on support for slavery}

Calculate observed test statistic, randomization $p$ value, and confidence interval. 
<<>>=
#call perm test
results.assembly <- Permutation.Test(box,assembly,y=assembly$vote.index,prizes)
results.assembly$p
#what is observed t-stat?
observed.t.assembly <- est.ate(assembly$vote.index,assembly$treat,assembly$draw,box,prizes)
observed.t.assembly
#create histogram of permutation distribution
hist.plot4 <- qplot(results.assembly $perm.t.stats, geom="histogram",xlab=expression(delta), ylab="Count",binwidth=0.001) + labs(title="Treatment effect on demand for slavery") + geom_vline(aes(xintercept=round(observed.t.assembly,3)), colour="red", linetype = "longdash") + scale_x_continuous(breaks=c(-0.2,0,0.2,round(observed.t.assembly,3)),labels=c("-0.2","0","0.2",round(observed.t.assembly,3)))
#report(100-alpha)% CI
perm.CI(alpha=0.05,box,assembly,y=assembly$vote.index,prizes)
@

Create table showing outcomes by treatment group.
<<results='tex'>>=
#custom stats
my.stats <- list("n","min","mean","max","s")
tableContinuous(vars = assembly[("vote.index")], group = assembly$treat, prec = 3,cumsum=FALSE,stats=my.stats,cap = "Distribution of the outcome variable, by treatment assignment, for lottery participants who held the office in the Georgia General Assembly, and who voted on at least one of the thirteen bills used to form the outcome variable. `Support for slavery' is the mean of votes in favor of slavery for roll calls in which the member is present. $p$ values are calculated using a randomization test for weighted difference of means between treatment and control groups.", lab = "outcomes-assembly")
@

\subsection{Sensitivity analysis: three treatments}

<<>>=
#use same lottery as previous analysis 
assembly2 <-assembly
#create dummy for treatment received 
assembly2$tot <- assembly2$treat
assembly2$tot[assembly2$RGB==1] <- 0
#create dummy for 2 draws
assembly2$twodraw <- ifelse(nchar(assembly2$draw)==2,1,0)
#create treatment dummies 
assembly2$Ba <- ifelse(substr(assembly2$prize,1,2)=="Ba",1,0)
assembly2$Ba[is.na(assembly2$Ba)] <- 0
assembly2$Wa <- ifelse(substr(assembly2$prize,1,2)=="Wa",1,0)
assembly2$Wa[is.na(assembly2$Wa)] <- 0
assembly2$Wi <- ifelse(substr(assembly2$prize,1,2)=="Wi",1,0)
assembly2$Wi[is.na(assembly2$Wi)] <- 0
#create TOT dummies
assembly2$Ba.tot <- assembly2$Ba
assembly2$Ba.tot[assembly2$RGB==1] <- 0
assembly2$Wa.tot <- assembly2$Wa
assembly2$Wa.tot[assembly2$RGB==1] <- 0
assembly2$Wi.tot <- assembly2$Wi
assembly2$Wi.tot[assembly2$RGB==1] <- 0
@ 

Repeat IV analysis.
<<>>=
#call IV
resuts.assembly.Ba.3 <- ivreg(vote.index ~ twodraw + county + Ba.tot | twodraw +county + Ba, data=assembly2)
resuts.assembly.Wa.3 <- ivreg(vote.index ~ twodraw + county + Wa.tot | twodraw +county + Wa, data=assembly2)
resuts.assembly.Wi.3 <- ivreg(vote.index ~ twodraw + county + Wi.tot | twodraw +county + Wi, data=assembly2)
#get confidence interval
confint(resuts.assembly.Ba.3,"Ba.tot",level =0.95)
confint(resuts.assembly.Wa.3,"Wa.tot",level =0.95)
confint(resuts.assembly.Wi.3,"Wi.tot",level =0.95)
#report treatment effects
resuts.assembly.Ba.3$coefficients["Ba.tot"]
resuts.assembly.Wa.3$coefficients["Wa.tot"]
resuts.assembly.Wi.3$coefficients["Wi.tot"]
@

\section{Permutation plots}

Combine permutation plots.
<<>>=
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(hist.plot, vp = vplayout(1, 1))
print(hist.plot2, vp = vplayout(1, 2))
print(hist.plot4, vp=vplayout(2,2))
@

\end{document}